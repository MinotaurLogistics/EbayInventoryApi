<?php
/**
 * CompatibleProduct
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\EbayInventoryClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Inventory API
 *
 * The Inventory API is used to create and manage inventory, and then to publish and manage this inventory on an eBay marketplace. There are also methods in this API that will convert eligible, active eBay listings into the Inventory API model.
 *
 * OpenAPI spec version: 1.11.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.16
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\EbayInventoryClient\Model;

use \ArrayAccess;
use \Swagger\EbayInventoryClient\ObjectSerializer;

/**
 * CompatibleProduct Class Doc Comment
 *
 * @category Class
 * @description This type is used to specify/indicate the motor vehicles that are compatible with the corresponding inventory item.
 * @package  Swagger\EbayInventoryClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CompatibleProduct implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CompatibleProduct';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'compatibility_properties' => '\Swagger\EbayInventoryClient\Model\NameValueList[]',
        'notes' => 'string',
        'product_family_properties' => '\Swagger\EbayInventoryClient\Model\ProductFamilyProperties',
        'product_identifier' => '\Swagger\EbayInventoryClient\Model\ProductIdentifier'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'compatibility_properties' => null,
        'notes' => null,
        'product_family_properties' => null,
        'product_identifier' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'compatibility_properties' => 'compatibilityProperties',
        'notes' => 'notes',
        'product_family_properties' => 'productFamilyProperties',
        'product_identifier' => 'productIdentifier'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'compatibility_properties' => 'setCompatibilityProperties',
        'notes' => 'setNotes',
        'product_family_properties' => 'setProductFamilyProperties',
        'product_identifier' => 'setProductIdentifier'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'compatibility_properties' => 'getCompatibilityProperties',
        'notes' => 'getNotes',
        'product_family_properties' => 'getProductFamilyProperties',
        'product_identifier' => 'getProductIdentifier'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['compatibility_properties'] = isset($data['compatibility_properties']) ? $data['compatibility_properties'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['product_family_properties'] = isset($data['product_family_properties']) ? $data['product_family_properties'] : null;
        $this->container['product_identifier'] = isset($data['product_identifier']) ? $data['product_identifier'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets compatibility_properties
     *
     * @return \Swagger\EbayInventoryClient\Model\NameValueList[]
     */
    public function getCompatibilityProperties()
    {
        return $this->container['compatibility_properties'];
    }

    /**
     * Sets compatibility_properties
     *
     * @param \Swagger\EbayInventoryClient\Model\NameValueList[] $compatibility_properties This container consists of an array of motor vehicles that are compatible with the motor vehicle part or accessory specified by the SKU value in the call URI. Each motor vehicle is defined through a separate set of name/value pairs. In the name field, the vehicle aspect (such as 'make', 'model', 'year', 'trim', or 'engine') will be identified, and the value field will be used to identify the value of each aspect. The getCompatibilityProperties method of the Taxonomy API can be used to retrieve applicable vehicle aspect names for a specified category, and the getCompatibilityPropertyValues method of the Taxonomy API can be used to retrieve possible values for these same vehicle aspect names. Below is an example of identifying one motor vehicle using the compatibilityProperties container: &quot;compatibilityProperties&quot; : [ &nbsp;&nbsp;{ &nbsp;&nbsp;&nbsp;&quot;name&quot; : &quot;make&quot;, &nbsp;&nbsp;&nbsp;&quot;value&quot; : &quot;Subaru&quot; &nbsp;&nbsp;}, &nbsp;&nbsp;{ &nbsp;&nbsp;&nbsp;&quot;name&quot; : &quot;model&quot;, &nbsp;&nbsp;&nbsp;&quot;value&quot; : &quot;GL&quot; &nbsp;&nbsp;}, &nbsp;&nbsp;{ &nbsp;&nbsp;&nbsp;&quot;name&quot; : &quot;year&quot;, &nbsp;&nbsp;&nbsp;&quot;value&quot; : &quot;1983&quot; &nbsp;&nbsp;}, &nbsp;&nbsp;{ &nbsp;&nbsp;&nbsp;&quot;name&quot; : &quot;trim&quot;, &nbsp;&nbsp;&nbsp;&quot;value&quot; : &quot;Base Wagon 4-Door&quot; &nbsp;&nbsp;}, &nbsp;&nbsp;{ &nbsp;&nbsp;&nbsp;&quot;name&quot; : &quot;engine&quot;, &nbsp;&nbsp;&nbsp;&quot;value&quot; : &quot;1.8L Turbocharged&quot; &nbsp;&nbsp;} ] Typically, the make, model, and year of the motor vehicle are always required, with the trim and engine being necessary sometimes, but it will be dependent on the part or accessory, and on the vehicle class. Note: The productFamilyProperties container is in the process of being deprecated and will no longer be supported in February of 2021, so if you are a new user of createOrReplaceProductCompatibility, you should use the compatibilityProperties container instead, and if you are already integrated and using the productFamilyProperties container, you should make plans to migrate to compatibilityProperties. The productFamilyProperties and compatibilityProperties containers may not be used together or the call will fail.
     *
     * @return $this
     */
    public function setCompatibilityProperties($compatibility_properties)
    {
        $this->container['compatibility_properties'] = $compatibility_properties;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string $notes This field is optionally used by the seller to input any notes pertaining to the compatible vehicle list being defined. The seller might use this field to specify the placement of the part on a vehicle or other applicable information. This field will only be returned if specified by the seller. Max Length: 500
     *
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets product_family_properties
     *
     * @return \Swagger\EbayInventoryClient\Model\ProductFamilyProperties
     */
    public function getProductFamilyProperties()
    {
        return $this->container['product_family_properties'];
    }

    /**
     * Sets product_family_properties
     *
     * @param \Swagger\EbayInventoryClient\Model\ProductFamilyProperties $product_family_properties product_family_properties
     *
     * @return $this
     */
    public function setProductFamilyProperties($product_family_properties)
    {
        $this->container['product_family_properties'] = $product_family_properties;

        return $this;
    }

    /**
     * Gets product_identifier
     *
     * @return \Swagger\EbayInventoryClient\Model\ProductIdentifier
     */
    public function getProductIdentifier()
    {
        return $this->container['product_identifier'];
    }

    /**
     * Sets product_identifier
     *
     * @param \Swagger\EbayInventoryClient\Model\ProductIdentifier $product_identifier product_identifier
     *
     * @return $this
     */
    public function setProductIdentifier($product_identifier)
    {
        $this->container['product_identifier'] = $product_identifier;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


